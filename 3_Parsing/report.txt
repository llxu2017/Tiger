State 8 conflicts: 3 shift/reduce
State 45 conflicts: 1 shift/reduce
State 46 conflicts: 1 shift/reduce
State 92 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 declist: %empty
    3        | dec
    4        | declist dec

    5 dec: typedec
    6    | vardec
    7    | funcdeclist

    8 funcdeclist: funcdec
    9            | funcdeclist funcdec

   10 nametylist: namety
   11           | nametylist namety

   12 typedec: nametylist

   13 ty: ID
   14   | recordty
   15   | arrayty

   16 namety: TYPE ID EQ ty

   17 recordty: LBRACE fieldlist RBRACE

   18 arrayty: ARRAY OF ID

   19 efieldlist: %empty
   20           | efield
   21           | efieldlist COMMA efield

   22 efield: ID EQ exp

   23 fieldlist: %empty
   24          | field
   25          | fieldlist COMMA field

   26 field: ID COLON ID

   27 var: simplevar
   28    | fieldvar
   29    | subscriptvar
   30    | var DOT var

   31 simplevar: ID

   32 fieldvar: VAR ID COLON ID

   33 subscriptvar: ID LBRACK exp RBRACK
   34             | subscriptvar LBRACK exp RBRACK

   35 vardec: VAR ID ASSIGN exp
   36       | VAR ID COLON ID ASSIGN exp

   37 funcdec: FUNCTION ID LPAREN fieldlist RPAREN EQ exp
   38        | FUNCTION ID LPAREN fieldlist RPAREN COLON ID EQ exp

   39 explist: %empty
   40        | exp
   41        | explist SEMICOLON exp
   42        | explist COMMA exp

   43 opexp: exp PLUS exp
   44      | exp MINUS exp
   45      | MINUS exp
   46      | exp TIMES exp
   47      | exp DIVIDE exp
   48      | exp EQ exp
   49      | exp NEQ exp
   50      | exp LT exp
   51      | exp LE exp
   52      | exp GT exp
   53      | exp GE exp
   54      | exp AND exp
   55      | exp OR exp

   56 ifexp: IF exp THEN exp ELSE exp
   57      | IF exp THEN exp

   58 whileexp: WHILE exp DO exp

   59 forexp: FOR var ASSIGN exp TO exp DO exp

   60 arrayexp: ID LBRACK exp RBRACK OF exp

   61 recordexp: ID LBRACE efieldlist RBRACE

   62 varexp: var

   63 nilexp: NIL

   64 intexp: INT

   65 stringexp: STRING

   66 callexp: ID LPAREN explist RPAREN

   67 seqexp: explist

   68 assignexp: var ASSIGN exp

   69 breakexp: BREAK

   70 letexp: LET declist IN seqexp END

   71 exp: varexp
   72    | nilexp
   73    | intexp
   74    | stringexp
   75    | callexp
   76    | opexp
   77    | recordexp
   78    | LPAREN seqexp RPAREN
   79    | assignexp
   80    | ifexp
   81    | whileexp
   82    | forexp
   83    | breakexp
   84    | letexp
   85    | arrayexp


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 13 16 18 22 26 31 32 33 35 36 37 38 60 61 66
STRING (259) 65
INT (260) 64
COMMA (261) 21 25 42
COLON (262) 26 32 36 38
SEMICOLON (263) 41
LPAREN (264) 37 38 66 78
RPAREN (265) 37 38 66 78
LBRACK (266) 33 34 60
RBRACK (267) 33 34 60
LBRACE (268) 17 61
RBRACE (269) 17 61
DOT (270) 30
ARRAY (271) 18
BREAK (272) 69
NIL (273) 63
FUNCTION (274) 37 38
VAR (275) 32 35 36
TYPE (276) 16
LET (277) 70
IN (278) 70
END (279) 70
IF (280) 56 57
WHILE (281) 58
FOR (282) 59
TO (283) 59
THEN (284) 56 57
DO (285) 58 59
ELSE (286) 56
ASSIGN (287) 35 36 59 68
AND (288) 54
OR (289) 55
EQ (290) 16 22 37 38 48
NEQ (291) 49
LT (292) 50
LE (293) 51
GT (294) 52
GE (295) 53
PLUS (296) 43
MINUS (297) 44 45
TIMES (298) 46
DIVIDE (299) 47
OF (300) 18 60


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
declist (48)
    on left: 2 3 4, on right: 4 70
dec (49)
    on left: 5 6 7, on right: 3 4
funcdeclist (50)
    on left: 8 9, on right: 7 9
nametylist (51)
    on left: 10 11, on right: 11 12
typedec (52)
    on left: 12, on right: 5
ty (53)
    on left: 13 14 15, on right: 16
namety (54)
    on left: 16, on right: 10 11
recordty (55)
    on left: 17, on right: 14
arrayty (56)
    on left: 18, on right: 15
efieldlist (57)
    on left: 19 20 21, on right: 21 61
efield (58)
    on left: 22, on right: 20 21
fieldlist (59)
    on left: 23 24 25, on right: 17 25 37 38
field (60)
    on left: 26, on right: 24 25
var (61)
    on left: 27 28 29 30, on right: 30 59 62 68
simplevar (62)
    on left: 31, on right: 27
fieldvar (63)
    on left: 32, on right: 28
subscriptvar (64)
    on left: 33 34, on right: 29 34
vardec (65)
    on left: 35 36, on right: 6
funcdec (66)
    on left: 37 38, on right: 8 9
explist (67)
    on left: 39 40 41 42, on right: 41 42 66 67
opexp (68)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54 55, on right: 76
ifexp (69)
    on left: 56 57, on right: 80
whileexp (70)
    on left: 58, on right: 81
forexp (71)
    on left: 59, on right: 82
arrayexp (72)
    on left: 60, on right: 85
recordexp (73)
    on left: 61, on right: 77
varexp (74)
    on left: 62, on right: 71
nilexp (75)
    on left: 63, on right: 72
intexp (76)
    on left: 64, on right: 73
stringexp (77)
    on left: 65, on right: 74
callexp (78)
    on left: 66, on right: 75
seqexp (79)
    on left: 67, on right: 70 78
assignexp (80)
    on left: 68, on right: 79
breakexp (81)
    on left: 69, on right: 83
letexp (82)
    on left: 70, on right: 84
exp (83)
    on left: 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85, on right:
    1 22 33 34 35 36 37 38 40 41 42 43 44 45 46 47 48 49 50 51 52 53
    54 55 56 57 58 59 60 68


State 0

    0 $accept: . program $end
    1 program: . exp
   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    program       go to state 13
    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 32


State 1

   31 simplevar: ID .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, ASSIGN, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   33 subscriptvar: ID . LBRACK exp RBRACK
   60 arrayexp: ID . LBRACK exp RBRACK OF exp
   61 recordexp: ID . LBRACE efieldlist RBRACE
   66 callexp: ID . LPAREN explist RPAREN

    LPAREN  shift, and go to state 33
    LBRACK  shift, and go to state 34
    LBRACE  shift, and go to state 35

    $default  reduce using rule 31 (simplevar)


State 2

   65 stringexp: STRING .

    $default  reduce using rule 65 (stringexp)


State 3

   64 intexp: INT .

    $default  reduce using rule 64 (intexp)


State 4

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   39 explist: . %empty  [COMMA, SEMICOLON, RPAREN]
   40        | . exp
   41        | . explist SEMICOLON exp
   42        | . explist COMMA exp
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   67 seqexp: . explist
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   78    | LPAREN . seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    $default  reduce using rule 39 (explist)

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    explist       go to state 36
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    seqexp        go to state 37
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 38


State 5

   69 breakexp: BREAK .

    $default  reduce using rule 69 (breakexp)


State 6

   63 nilexp: NIL .

    $default  reduce using rule 63 (nilexp)


State 7

   32 fieldvar: VAR . ID COLON ID

    ID  shift, and go to state 39


State 8

    2 declist: . %empty  [FUNCTION, VAR, TYPE, IN]
    3        | . dec
    4        | . declist dec
    5 dec: . typedec
    6    | . vardec
    7    | . funcdeclist
    8 funcdeclist: . funcdec
    9            | . funcdeclist funcdec
   10 nametylist: . namety
   11           | . nametylist namety
   12 typedec: . nametylist
   16 namety: . TYPE ID EQ ty
   35 vardec: . VAR ID ASSIGN exp
   36       | . VAR ID COLON ID ASSIGN exp
   37 funcdec: . FUNCTION ID LPAREN fieldlist RPAREN EQ exp
   38        | . FUNCTION ID LPAREN fieldlist RPAREN COLON ID EQ exp
   70 letexp: LET . declist IN seqexp END

    FUNCTION  shift, and go to state 40
    VAR       shift, and go to state 41
    TYPE      shift, and go to state 42

    FUNCTION  [reduce using rule 2 (declist)]
    VAR       [reduce using rule 2 (declist)]
    TYPE      [reduce using rule 2 (declist)]
    $default  reduce using rule 2 (declist)

    declist      go to state 43
    dec          go to state 44
    funcdeclist  go to state 45
    nametylist   go to state 46
    typedec      go to state 47
    namety       go to state 48
    vardec       go to state 49
    funcdec      go to state 50


State 9

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   56      | IF . exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   57      | IF . exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 51


State 10

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   58         | WHILE . exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 52


State 11

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   59 forexp: FOR . var ASSIGN exp TO exp DO exp

    ID   shift, and go to state 53
    VAR  shift, and go to state 7

    var           go to state 54
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17


State 12

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   45      | MINUS . exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 55


State 13

    0 $accept: program . $end

    $end  shift, and go to state 56


State 14

   30 var: var . DOT var
   62 varexp: var .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   68 assignexp: var . ASSIGN exp

    DOT     shift, and go to state 57
    ASSIGN  shift, and go to state 58

    $default  reduce using rule 62 (varexp)


State 15

   27 var: simplevar .

    $default  reduce using rule 27 (var)


State 16

   28 var: fieldvar .

    $default  reduce using rule 28 (var)


State 17

   29 var: subscriptvar .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, ASSIGN, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   34 subscriptvar: subscriptvar . LBRACK exp RBRACK

    LBRACK  shift, and go to state 59

    $default  reduce using rule 29 (var)


State 18

   76 exp: opexp .

    $default  reduce using rule 76 (exp)


State 19

   80 exp: ifexp .

    $default  reduce using rule 80 (exp)


State 20

   81 exp: whileexp .

    $default  reduce using rule 81 (exp)


State 21

   82 exp: forexp .

    $default  reduce using rule 82 (exp)


State 22

   85 exp: arrayexp .

    $default  reduce using rule 85 (exp)


State 23

   77 exp: recordexp .

    $default  reduce using rule 77 (exp)


State 24

   71 exp: varexp .

    $default  reduce using rule 71 (exp)


State 25

   72 exp: nilexp .

    $default  reduce using rule 72 (exp)


State 26

   73 exp: intexp .

    $default  reduce using rule 73 (exp)


State 27

   74 exp: stringexp .

    $default  reduce using rule 74 (exp)


State 28

   75 exp: callexp .

    $default  reduce using rule 75 (exp)


State 29

   79 exp: assignexp .

    $default  reduce using rule 79 (exp)


State 30

   83 exp: breakexp .

    $default  reduce using rule 83 (exp)


State 31

   84 exp: letexp .

    $default  reduce using rule 84 (exp)


State 32

    1 program: exp .  [$end]
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 1 (program)


State 33

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   39 explist: . %empty  [COMMA, SEMICOLON, RPAREN]
   40        | . exp
   41        | . explist SEMICOLON exp
   42        | . explist COMMA exp
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   66        | ID LPAREN . explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    $default  reduce using rule 39 (explist)

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    explist       go to state 72
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 38


State 34

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   33             | ID LBRACK . exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   60         | ID LBRACK . exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 73


State 35

   19 efieldlist: . %empty  [COMMA, RBRACE]
   20           | . efield
   21           | . efieldlist COMMA efield
   22 efield: . ID EQ exp
   61 recordexp: ID LBRACE . efieldlist RBRACE

    ID  shift, and go to state 74

    $default  reduce using rule 19 (efieldlist)

    efieldlist  go to state 75
    efield      go to state 76


State 36

   41 explist: explist . SEMICOLON exp
   42        | explist . COMMA exp
   67 seqexp: explist .  [RPAREN, END]

    COMMA      shift, and go to state 77
    SEMICOLON  shift, and go to state 78

    $default  reduce using rule 67 (seqexp)


State 37

   78 exp: LPAREN seqexp . RPAREN

    RPAREN  shift, and go to state 79


State 38

   40 explist: exp .  [COMMA, SEMICOLON, RPAREN, END]
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 40 (explist)


State 39

   32 fieldvar: VAR ID . COLON ID

    COLON  shift, and go to state 80


State 40

   37 funcdec: FUNCTION . ID LPAREN fieldlist RPAREN EQ exp
   38        | FUNCTION . ID LPAREN fieldlist RPAREN COLON ID EQ exp

    ID  shift, and go to state 81


State 41

   35 vardec: VAR . ID ASSIGN exp
   36       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 82


State 42

   16 namety: TYPE . ID EQ ty

    ID  shift, and go to state 83


State 43

    4 declist: declist . dec
    5 dec: . typedec
    6    | . vardec
    7    | . funcdeclist
    8 funcdeclist: . funcdec
    9            | . funcdeclist funcdec
   10 nametylist: . namety
   11           | . nametylist namety
   12 typedec: . nametylist
   16 namety: . TYPE ID EQ ty
   35 vardec: . VAR ID ASSIGN exp
   36       | . VAR ID COLON ID ASSIGN exp
   37 funcdec: . FUNCTION ID LPAREN fieldlist RPAREN EQ exp
   38        | . FUNCTION ID LPAREN fieldlist RPAREN COLON ID EQ exp
   70 letexp: LET declist . IN seqexp END

    FUNCTION  shift, and go to state 40
    VAR       shift, and go to state 41
    TYPE      shift, and go to state 42
    IN        shift, and go to state 84

    dec          go to state 85
    funcdeclist  go to state 45
    nametylist   go to state 46
    typedec      go to state 47
    namety       go to state 48
    vardec       go to state 49
    funcdec      go to state 50


State 44

    3 declist: dec .

    $default  reduce using rule 3 (declist)


State 45

    7 dec: funcdeclist .  [FUNCTION, VAR, TYPE, IN]
    9 funcdeclist: funcdeclist . funcdec
   37 funcdec: . FUNCTION ID LPAREN fieldlist RPAREN EQ exp
   38        | . FUNCTION ID LPAREN fieldlist RPAREN COLON ID EQ exp

    FUNCTION  shift, and go to state 40

    FUNCTION  [reduce using rule 7 (dec)]
    $default  reduce using rule 7 (dec)

    funcdec  go to state 86


State 46

   11 nametylist: nametylist . namety
   12 typedec: nametylist .  [FUNCTION, VAR, TYPE, IN]
   16 namety: . TYPE ID EQ ty

    TYPE  shift, and go to state 42

    TYPE      [reduce using rule 12 (typedec)]
    $default  reduce using rule 12 (typedec)

    namety  go to state 87


State 47

    5 dec: typedec .

    $default  reduce using rule 5 (dec)


State 48

   10 nametylist: namety .

    $default  reduce using rule 10 (nametylist)


State 49

    6 dec: vardec .

    $default  reduce using rule 6 (dec)


State 50

    8 funcdeclist: funcdec .

    $default  reduce using rule 8 (funcdeclist)


State 51

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   56 ifexp: IF exp . THEN exp ELSE exp
   57      | IF exp . THEN exp

    THEN    shift, and go to state 88
    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71


State 52

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   58 whileexp: WHILE exp . DO exp

    DO      shift, and go to state 89
    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71


State 53

   31 simplevar: ID .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, ASSIGN, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   33 subscriptvar: ID . LBRACK exp RBRACK

    LBRACK  shift, and go to state 90

    $default  reduce using rule 31 (simplevar)


State 54

   30 var: var . DOT var
   59 forexp: FOR var . ASSIGN exp TO exp DO exp

    DOT     shift, and go to state 57
    ASSIGN  shift, and go to state 91


State 55

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   45      | MINUS exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS]
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 45 (opexp)

    Conflict between rule 45 and token AND resolved as reduce (AND < MINUS).
    Conflict between rule 45 and token OR resolved as reduce (OR < MINUS).
    Conflict between rule 45 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 45 and token NEQ resolved as reduce (NEQ < MINUS).
    Conflict between rule 45 and token LT resolved as reduce (LT < MINUS).
    Conflict between rule 45 and token LE resolved as reduce (LE < MINUS).
    Conflict between rule 45 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 45 and token GE resolved as reduce (GE < MINUS).
    Conflict between rule 45 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 45 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 45 and token TIMES resolved as shift (MINUS < TIMES).
    Conflict between rule 45 and token DIVIDE resolved as shift (MINUS < DIVIDE).


State 56

    0 $accept: program $end .

    $default  accept


State 57

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   30    | var DOT . var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK

    ID   shift, and go to state 53
    VAR  shift, and go to state 7

    var           go to state 92
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17


State 58

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   68          | var ASSIGN . exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 93


State 59

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   34             | subscriptvar LBRACK . exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 94


State 60

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   54      | exp AND . exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 95


State 61

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   55      | exp OR . exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 96


State 62

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   48      | exp EQ . exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 97


State 63

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   49      | exp NEQ . exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 98


State 64

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   50      | exp LT . exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 99


State 65

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   51      | exp LE . exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 100


State 66

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   52      | exp GT . exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 101


State 67

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   53      | exp GE . exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 102


State 68

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   43      | exp PLUS . exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 103


State 69

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   44      | exp MINUS . exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 104


State 70

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   46      | exp TIMES . exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 105


State 71

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   47      | exp DIVIDE . exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 106


State 72

   41 explist: explist . SEMICOLON exp
   42        | explist . COMMA exp
   66 callexp: ID LPAREN explist . RPAREN

    COMMA      shift, and go to state 77
    SEMICOLON  shift, and go to state 78
    RPAREN     shift, and go to state 107


State 73

   33 subscriptvar: ID LBRACK exp . RBRACK
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   60 arrayexp: ID LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 108
    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71


State 74

   22 efield: ID . EQ exp

    EQ  shift, and go to state 109


State 75

   21 efieldlist: efieldlist . COMMA efield
   61 recordexp: ID LBRACE efieldlist . RBRACE

    COMMA   shift, and go to state 110
    RBRACE  shift, and go to state 111


State 76

   20 efieldlist: efield .

    $default  reduce using rule 20 (efieldlist)


State 77

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   42 explist: explist COMMA . exp
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 112


State 78

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   41 explist: explist SEMICOLON . exp
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 113


State 79

   78 exp: LPAREN seqexp RPAREN .

    $default  reduce using rule 78 (exp)


State 80

   32 fieldvar: VAR ID COLON . ID

    ID  shift, and go to state 114


State 81

   37 funcdec: FUNCTION ID . LPAREN fieldlist RPAREN EQ exp
   38        | FUNCTION ID . LPAREN fieldlist RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 115


State 82

   35 vardec: VAR ID . ASSIGN exp
   36       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 116
    ASSIGN  shift, and go to state 117


State 83

   16 namety: TYPE ID . EQ ty

    EQ  shift, and go to state 118


State 84

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   39 explist: . %empty  [COMMA, SEMICOLON, END]
   40        | . exp
   41        | . explist SEMICOLON exp
   42        | . explist COMMA exp
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   67 seqexp: . explist
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   70       | LET declist IN . seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    $default  reduce using rule 39 (explist)

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    explist       go to state 36
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    seqexp        go to state 119
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 38


State 85

    4 declist: declist dec .

    $default  reduce using rule 4 (declist)


State 86

    9 funcdeclist: funcdeclist funcdec .

    $default  reduce using rule 9 (funcdeclist)


State 87

   11 nametylist: nametylist namety .

    $default  reduce using rule 11 (nametylist)


State 88

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   56      | IF exp THEN . exp ELSE exp
   57      | . IF exp THEN exp
   57      | IF exp THEN . exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 120


State 89

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   58         | WHILE exp DO . exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 121


State 90

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   33             | ID LBRACK . exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 122


State 91

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   59       | FOR var ASSIGN . exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 123


State 92

   30 var: var . DOT var
   30    | var DOT var .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, ASSIGN, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    DOT  shift, and go to state 57

    DOT       [reduce using rule 30 (var)]
    $default  reduce using rule 30 (var)


State 93

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   68 assignexp: var ASSIGN exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE]

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 68 (assignexp)

    Conflict between rule 68 and token AND resolved as shift (ASSIGN < AND).
    Conflict between rule 68 and token OR resolved as shift (ASSIGN < OR).
    Conflict between rule 68 and token EQ resolved as shift (ASSIGN < EQ).
    Conflict between rule 68 and token NEQ resolved as shift (ASSIGN < NEQ).
    Conflict between rule 68 and token LT resolved as shift (ASSIGN < LT).
    Conflict between rule 68 and token LE resolved as shift (ASSIGN < LE).
    Conflict between rule 68 and token GT resolved as shift (ASSIGN < GT).
    Conflict between rule 68 and token GE resolved as shift (ASSIGN < GE).
    Conflict between rule 68 and token PLUS resolved as shift (ASSIGN < PLUS).
    Conflict between rule 68 and token MINUS resolved as shift (ASSIGN < MINUS).
    Conflict between rule 68 and token TIMES resolved as shift (ASSIGN < TIMES).
    Conflict between rule 68 and token DIVIDE resolved as shift (ASSIGN < DIVIDE).


State 94

   34 subscriptvar: subscriptvar LBRACK exp . RBRACK
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    RBRACK  shift, and go to state 124
    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71


State 95

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   54      | exp AND exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR]
   55      | exp . OR exp

    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 54 (opexp)

    Conflict between rule 54 and token AND resolved as reduce (%left AND).
    Conflict between rule 54 and token OR resolved as reduce (%left OR).
    Conflict between rule 54 and token EQ resolved as shift (AND < EQ).
    Conflict between rule 54 and token NEQ resolved as shift (AND < NEQ).
    Conflict between rule 54 and token LT resolved as shift (AND < LT).
    Conflict between rule 54 and token LE resolved as shift (AND < LE).
    Conflict between rule 54 and token GT resolved as shift (AND < GT).
    Conflict between rule 54 and token GE resolved as shift (AND < GE).
    Conflict between rule 54 and token PLUS resolved as shift (AND < PLUS).
    Conflict between rule 54 and token MINUS resolved as shift (AND < MINUS).
    Conflict between rule 54 and token TIMES resolved as shift (AND < TIMES).
    Conflict between rule 54 and token DIVIDE resolved as shift (AND < DIVIDE).


State 96

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   55      | exp OR exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR]

    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 55 (opexp)

    Conflict between rule 55 and token AND resolved as reduce (%left AND).
    Conflict between rule 55 and token OR resolved as reduce (%left OR).
    Conflict between rule 55 and token EQ resolved as shift (OR < EQ).
    Conflict between rule 55 and token NEQ resolved as shift (OR < NEQ).
    Conflict between rule 55 and token LT resolved as shift (OR < LT).
    Conflict between rule 55 and token LE resolved as shift (OR < LE).
    Conflict between rule 55 and token GT resolved as shift (OR < GT).
    Conflict between rule 55 and token GE resolved as shift (OR < GE).
    Conflict between rule 55 and token PLUS resolved as shift (OR < PLUS).
    Conflict between rule 55 and token MINUS resolved as shift (OR < MINUS).
    Conflict between rule 55 and token TIMES resolved as shift (OR < TIMES).
    Conflict between rule 55 and token DIVIDE resolved as shift (OR < DIVIDE).


State 97

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   48      | exp EQ exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR]
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 48 (opexp)

    Conflict between rule 48 and token AND resolved as reduce (AND < EQ).
    Conflict between rule 48 and token OR resolved as reduce (OR < EQ).
    Conflict between rule 48 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 48 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 48 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 48 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 48 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 48 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 48 and token PLUS resolved as shift (EQ < PLUS).
    Conflict between rule 48 and token MINUS resolved as shift (EQ < MINUS).
    Conflict between rule 48 and token TIMES resolved as shift (EQ < TIMES).
    Conflict between rule 48 and token DIVIDE resolved as shift (EQ < DIVIDE).


State 98

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   49      | exp NEQ exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR]
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 49 (opexp)

    Conflict between rule 49 and token AND resolved as reduce (AND < NEQ).
    Conflict between rule 49 and token OR resolved as reduce (OR < NEQ).
    Conflict between rule 49 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 49 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 49 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 49 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 49 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 49 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 49 and token PLUS resolved as shift (NEQ < PLUS).
    Conflict between rule 49 and token MINUS resolved as shift (NEQ < MINUS).
    Conflict between rule 49 and token TIMES resolved as shift (NEQ < TIMES).
    Conflict between rule 49 and token DIVIDE resolved as shift (NEQ < DIVIDE).


State 99

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   50      | exp LT exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR]
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 50 (opexp)

    Conflict between rule 50 and token AND resolved as reduce (AND < LT).
    Conflict between rule 50 and token OR resolved as reduce (OR < LT).
    Conflict between rule 50 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 50 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 50 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 50 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 50 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 50 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 50 and token PLUS resolved as shift (LT < PLUS).
    Conflict between rule 50 and token MINUS resolved as shift (LT < MINUS).
    Conflict between rule 50 and token TIMES resolved as shift (LT < TIMES).
    Conflict between rule 50 and token DIVIDE resolved as shift (LT < DIVIDE).


State 100

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   51      | exp LE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR]
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 51 (opexp)

    Conflict between rule 51 and token AND resolved as reduce (AND < LE).
    Conflict between rule 51 and token OR resolved as reduce (OR < LE).
    Conflict between rule 51 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 51 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 51 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 51 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 51 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 51 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 51 and token PLUS resolved as shift (LE < PLUS).
    Conflict between rule 51 and token MINUS resolved as shift (LE < MINUS).
    Conflict between rule 51 and token TIMES resolved as shift (LE < TIMES).
    Conflict between rule 51 and token DIVIDE resolved as shift (LE < DIVIDE).


State 101

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   52      | exp GT exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR]
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 52 (opexp)

    Conflict between rule 52 and token AND resolved as reduce (AND < GT).
    Conflict between rule 52 and token OR resolved as reduce (OR < GT).
    Conflict between rule 52 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 52 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 52 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 52 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 52 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 52 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 52 and token PLUS resolved as shift (GT < PLUS).
    Conflict between rule 52 and token MINUS resolved as shift (GT < MINUS).
    Conflict between rule 52 and token TIMES resolved as shift (GT < TIMES).
    Conflict between rule 52 and token DIVIDE resolved as shift (GT < DIVIDE).


State 102

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   53      | exp GE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR]
   54      | exp . AND exp
   55      | exp . OR exp

    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 53 (opexp)

    Conflict between rule 53 and token AND resolved as reduce (AND < GE).
    Conflict between rule 53 and token OR resolved as reduce (OR < GE).
    Conflict between rule 53 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 53 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 53 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 53 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 53 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 53 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 53 and token PLUS resolved as shift (GE < PLUS).
    Conflict between rule 53 and token MINUS resolved as shift (GE < MINUS).
    Conflict between rule 53 and token TIMES resolved as shift (GE < TIMES).
    Conflict between rule 53 and token DIVIDE resolved as shift (GE < DIVIDE).


State 103

   43 opexp: exp . PLUS exp
   43      | exp PLUS exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS]
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 43 (opexp)

    Conflict between rule 43 and token AND resolved as reduce (AND < PLUS).
    Conflict between rule 43 and token OR resolved as reduce (OR < PLUS).
    Conflict between rule 43 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 43 and token NEQ resolved as reduce (NEQ < PLUS).
    Conflict between rule 43 and token LT resolved as reduce (LT < PLUS).
    Conflict between rule 43 and token LE resolved as reduce (LE < PLUS).
    Conflict between rule 43 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 43 and token GE resolved as reduce (GE < PLUS).
    Conflict between rule 43 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 43 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 43 and token TIMES resolved as shift (PLUS < TIMES).
    Conflict between rule 43 and token DIVIDE resolved as shift (PLUS < DIVIDE).


State 104

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   44      | exp MINUS exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS]
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 44 (opexp)

    Conflict between rule 44 and token AND resolved as reduce (AND < MINUS).
    Conflict between rule 44 and token OR resolved as reduce (OR < MINUS).
    Conflict between rule 44 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 44 and token NEQ resolved as reduce (NEQ < MINUS).
    Conflict between rule 44 and token LT resolved as reduce (LT < MINUS).
    Conflict between rule 44 and token LE resolved as reduce (LE < MINUS).
    Conflict between rule 44 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 44 and token GE resolved as reduce (GE < MINUS).
    Conflict between rule 44 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 44 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 44 and token TIMES resolved as shift (MINUS < TIMES).
    Conflict between rule 44 and token DIVIDE resolved as shift (MINUS < DIVIDE).


State 105

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   46      | exp TIMES exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    $default  reduce using rule 46 (opexp)

    Conflict between rule 46 and token AND resolved as reduce (AND < TIMES).
    Conflict between rule 46 and token OR resolved as reduce (OR < TIMES).
    Conflict between rule 46 and token EQ resolved as reduce (EQ < TIMES).
    Conflict between rule 46 and token NEQ resolved as reduce (NEQ < TIMES).
    Conflict between rule 46 and token LT resolved as reduce (LT < TIMES).
    Conflict between rule 46 and token LE resolved as reduce (LE < TIMES).
    Conflict between rule 46 and token GT resolved as reduce (GT < TIMES).
    Conflict between rule 46 and token GE resolved as reduce (GE < TIMES).
    Conflict between rule 46 and token PLUS resolved as reduce (PLUS < TIMES).
    Conflict between rule 46 and token MINUS resolved as reduce (MINUS < TIMES).
    Conflict between rule 46 and token TIMES resolved as reduce (%left TIMES).
    Conflict between rule 46 and token DIVIDE resolved as reduce (%left DIVIDE).


State 106

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   47      | exp DIVIDE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    $default  reduce using rule 47 (opexp)

    Conflict between rule 47 and token AND resolved as reduce (AND < DIVIDE).
    Conflict between rule 47 and token OR resolved as reduce (OR < DIVIDE).
    Conflict between rule 47 and token EQ resolved as reduce (EQ < DIVIDE).
    Conflict between rule 47 and token NEQ resolved as reduce (NEQ < DIVIDE).
    Conflict between rule 47 and token LT resolved as reduce (LT < DIVIDE).
    Conflict between rule 47 and token LE resolved as reduce (LE < DIVIDE).
    Conflict between rule 47 and token GT resolved as reduce (GT < DIVIDE).
    Conflict between rule 47 and token GE resolved as reduce (GE < DIVIDE).
    Conflict between rule 47 and token PLUS resolved as reduce (PLUS < DIVIDE).
    Conflict between rule 47 and token MINUS resolved as reduce (MINUS < DIVIDE).
    Conflict between rule 47 and token TIMES resolved as reduce (%left TIMES).
    Conflict between rule 47 and token DIVIDE resolved as reduce (%left DIVIDE).


State 107

   66 callexp: ID LPAREN explist RPAREN .

    $default  reduce using rule 66 (callexp)


State 108

   33 subscriptvar: ID LBRACK exp RBRACK .  [$end, COMMA, SEMICOLON, RPAREN, LBRACK, RBRACK, RBRACE, DOT, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, ASSIGN, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   60 arrayexp: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 125

    $default  reduce using rule 33 (subscriptvar)


State 109

   22 efield: ID EQ . exp
   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 126


State 110

   21 efieldlist: efieldlist COMMA . efield
   22 efield: . ID EQ exp

    ID  shift, and go to state 74

    efield  go to state 127


State 111

   61 recordexp: ID LBRACE efieldlist RBRACE .

    $default  reduce using rule 61 (recordexp)


State 112

   42 explist: explist COMMA exp .  [COMMA, SEMICOLON, RPAREN, END]
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 42 (explist)


State 113

   41 explist: explist SEMICOLON exp .  [COMMA, SEMICOLON, RPAREN, END]
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 41 (explist)


State 114

   32 fieldvar: VAR ID COLON ID .

    $default  reduce using rule 32 (fieldvar)


State 115

   23 fieldlist: . %empty  [COMMA, RPAREN]
   24          | . field
   25          | . fieldlist COMMA field
   26 field: . ID COLON ID
   37 funcdec: FUNCTION ID LPAREN . fieldlist RPAREN EQ exp
   38        | FUNCTION ID LPAREN . fieldlist RPAREN COLON ID EQ exp

    ID  shift, and go to state 128

    $default  reduce using rule 23 (fieldlist)

    fieldlist  go to state 129
    field      go to state 130


State 116

   36 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 131


State 117

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   35 vardec: VAR ID ASSIGN . exp
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 132


State 118

   13 ty: . ID
   14   | . recordty
   15   | . arrayty
   16 namety: TYPE ID EQ . ty
   17 recordty: . LBRACE fieldlist RBRACE
   18 arrayty: . ARRAY OF ID

    ID      shift, and go to state 133
    LBRACE  shift, and go to state 134
    ARRAY   shift, and go to state 135

    ty        go to state 136
    recordty  go to state 137
    arrayty   go to state 138


State 119

   70 letexp: LET declist IN seqexp . END

    END  shift, and go to state 139


State 120

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   56 ifexp: IF exp THEN exp . ELSE exp
   57      | IF exp THEN exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO]

    ELSE    shift, and go to state 140
    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 57 (ifexp)

    Conflict between rule 57 and token ELSE resolved as shift (THEN < ELSE).
    Conflict between rule 57 and token AND resolved as shift (THEN < AND).
    Conflict between rule 57 and token OR resolved as shift (THEN < OR).
    Conflict between rule 57 and token EQ resolved as shift (THEN < EQ).
    Conflict between rule 57 and token NEQ resolved as shift (THEN < NEQ).
    Conflict between rule 57 and token LT resolved as shift (THEN < LT).
    Conflict between rule 57 and token LE resolved as shift (THEN < LE).
    Conflict between rule 57 and token GT resolved as shift (THEN < GT).
    Conflict between rule 57 and token GE resolved as shift (THEN < GE).
    Conflict between rule 57 and token PLUS resolved as shift (THEN < PLUS).
    Conflict between rule 57 and token MINUS resolved as shift (THEN < MINUS).
    Conflict between rule 57 and token TIMES resolved as shift (THEN < TIMES).
    Conflict between rule 57 and token DIVIDE resolved as shift (THEN < DIVIDE).


State 121

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   58 whileexp: WHILE exp DO exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE]

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 58 (whileexp)

    Conflict between rule 58 and token AND resolved as shift (DO < AND).
    Conflict between rule 58 and token OR resolved as shift (DO < OR).
    Conflict between rule 58 and token EQ resolved as shift (DO < EQ).
    Conflict between rule 58 and token NEQ resolved as shift (DO < NEQ).
    Conflict between rule 58 and token LT resolved as shift (DO < LT).
    Conflict between rule 58 and token LE resolved as shift (DO < LE).
    Conflict between rule 58 and token GT resolved as shift (DO < GT).
    Conflict between rule 58 and token GE resolved as shift (DO < GE).
    Conflict between rule 58 and token PLUS resolved as shift (DO < PLUS).
    Conflict between rule 58 and token MINUS resolved as shift (DO < MINUS).
    Conflict between rule 58 and token TIMES resolved as shift (DO < TIMES).
    Conflict between rule 58 and token DIVIDE resolved as shift (DO < DIVIDE).


State 122

   33 subscriptvar: ID LBRACK exp . RBRACK
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    RBRACK  shift, and go to state 141
    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71


State 123

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   59 forexp: FOR var ASSIGN exp . TO exp DO exp

    TO      shift, and go to state 142
    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71


State 124

   34 subscriptvar: subscriptvar LBRACK exp RBRACK .

    $default  reduce using rule 34 (subscriptvar)


State 125

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   60         | ID LBRACK exp RBRACK OF . exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 143


State 126

   22 efield: ID EQ exp .  [COMMA, RBRACE]
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 22 (efield)


State 127

   21 efieldlist: efieldlist COMMA efield .

    $default  reduce using rule 21 (efieldlist)


State 128

   26 field: ID . COLON ID

    COLON  shift, and go to state 144


State 129

   25 fieldlist: fieldlist . COMMA field
   37 funcdec: FUNCTION ID LPAREN fieldlist . RPAREN EQ exp
   38        | FUNCTION ID LPAREN fieldlist . RPAREN COLON ID EQ exp

    COMMA   shift, and go to state 145
    RPAREN  shift, and go to state 146


State 130

   24 fieldlist: field .

    $default  reduce using rule 24 (fieldlist)


State 131

   36 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 147


State 132

   35 vardec: VAR ID ASSIGN exp .  [FUNCTION, VAR, TYPE, IN]
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 35 (vardec)


State 133

   13 ty: ID .

    $default  reduce using rule 13 (ty)


State 134

   17 recordty: LBRACE . fieldlist RBRACE
   23 fieldlist: . %empty  [COMMA, RBRACE]
   24          | . field
   25          | . fieldlist COMMA field
   26 field: . ID COLON ID

    ID  shift, and go to state 128

    $default  reduce using rule 23 (fieldlist)

    fieldlist  go to state 148
    field      go to state 130


State 135

   18 arrayty: ARRAY . OF ID

    OF  shift, and go to state 149


State 136

   16 namety: TYPE ID EQ ty .

    $default  reduce using rule 16 (namety)


State 137

   14 ty: recordty .

    $default  reduce using rule 14 (ty)


State 138

   15 ty: arrayty .

    $default  reduce using rule 15 (ty)


State 139

   70 letexp: LET declist IN seqexp END .

    $default  reduce using rule 70 (letexp)


State 140

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   56      | IF exp THEN exp ELSE . exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 150


State 141

   33 subscriptvar: ID LBRACK exp RBRACK .

    $default  reduce using rule 33 (subscriptvar)


State 142

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   59       | FOR var ASSIGN exp TO . exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 151


State 143

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   60 arrayexp: ID LBRACK exp RBRACK OF exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE, AND, OR, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    $default  reduce using rule 60 (arrayexp)

    Conflict between rule 60 and token AND resolved as reduce (AND < OF).
    Conflict between rule 60 and token OR resolved as reduce (OR < OF).
    Conflict between rule 60 and token EQ resolved as reduce (EQ < OF).
    Conflict between rule 60 and token NEQ resolved as reduce (NEQ < OF).
    Conflict between rule 60 and token LT resolved as reduce (LT < OF).
    Conflict between rule 60 and token LE resolved as reduce (LE < OF).
    Conflict between rule 60 and token GT resolved as reduce (GT < OF).
    Conflict between rule 60 and token GE resolved as reduce (GE < OF).
    Conflict between rule 60 and token PLUS resolved as reduce (PLUS < OF).
    Conflict between rule 60 and token MINUS resolved as reduce (MINUS < OF).
    Conflict between rule 60 and token TIMES resolved as reduce (TIMES < OF).
    Conflict between rule 60 and token DIVIDE resolved as reduce (DIVIDE < OF).


State 144

   26 field: ID COLON . ID

    ID  shift, and go to state 152


State 145

   25 fieldlist: fieldlist COMMA . field
   26 field: . ID COLON ID

    ID  shift, and go to state 128

    field  go to state 153


State 146

   37 funcdec: FUNCTION ID LPAREN fieldlist RPAREN . EQ exp
   38        | FUNCTION ID LPAREN fieldlist RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 154
    EQ     shift, and go to state 155


State 147

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   36 vardec: VAR ID COLON ID ASSIGN . exp
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 156


State 148

   17 recordty: LBRACE fieldlist . RBRACE
   25 fieldlist: fieldlist . COMMA field

    COMMA   shift, and go to state 145
    RBRACE  shift, and go to state 157


State 149

   18 arrayty: ARRAY OF . ID

    ID  shift, and go to state 158


State 150

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   56 ifexp: IF exp THEN exp ELSE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE]

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 56 (ifexp)

    Conflict between rule 56 and token AND resolved as shift (ELSE < AND).
    Conflict between rule 56 and token OR resolved as shift (ELSE < OR).
    Conflict between rule 56 and token EQ resolved as shift (ELSE < EQ).
    Conflict between rule 56 and token NEQ resolved as shift (ELSE < NEQ).
    Conflict between rule 56 and token LT resolved as shift (ELSE < LT).
    Conflict between rule 56 and token LE resolved as shift (ELSE < LE).
    Conflict between rule 56 and token GT resolved as shift (ELSE < GT).
    Conflict between rule 56 and token GE resolved as shift (ELSE < GE).
    Conflict between rule 56 and token PLUS resolved as shift (ELSE < PLUS).
    Conflict between rule 56 and token MINUS resolved as shift (ELSE < MINUS).
    Conflict between rule 56 and token TIMES resolved as shift (ELSE < TIMES).
    Conflict between rule 56 and token DIVIDE resolved as shift (ELSE < DIVIDE).


State 151

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   59 forexp: FOR var ASSIGN exp TO exp . DO exp

    DO      shift, and go to state 159
    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71


State 152

   26 field: ID COLON ID .

    $default  reduce using rule 26 (field)


State 153

   25 fieldlist: fieldlist COMMA field .

    $default  reduce using rule 25 (fieldlist)


State 154

   38 funcdec: FUNCTION ID LPAREN fieldlist RPAREN COLON . ID EQ exp

    ID  shift, and go to state 160


State 155

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   37 funcdec: FUNCTION ID LPAREN fieldlist RPAREN EQ . exp
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 161


State 156

   36 vardec: VAR ID COLON ID ASSIGN exp .  [FUNCTION, VAR, TYPE, IN]
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 36 (vardec)


State 157

   17 recordty: LBRACE fieldlist RBRACE .

    $default  reduce using rule 17 (recordty)


State 158

   18 arrayty: ARRAY OF ID .

    $default  reduce using rule 18 (arrayty)


State 159

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   59       | FOR var ASSIGN exp TO exp DO . exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 162


State 160

   38 funcdec: FUNCTION ID LPAREN fieldlist RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 163


State 161

   37 funcdec: FUNCTION ID LPAREN fieldlist RPAREN EQ exp .  [FUNCTION, VAR, TYPE, IN]
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 37 (funcdec)


State 162

   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp
   59 forexp: FOR var ASSIGN exp TO exp DO exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, FUNCTION, VAR, TYPE, IN, END, TO, THEN, DO, ELSE]

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 59 (forexp)

    Conflict between rule 59 and token AND resolved as shift (DO < AND).
    Conflict between rule 59 and token OR resolved as shift (DO < OR).
    Conflict between rule 59 and token EQ resolved as shift (DO < EQ).
    Conflict between rule 59 and token NEQ resolved as shift (DO < NEQ).
    Conflict between rule 59 and token LT resolved as shift (DO < LT).
    Conflict between rule 59 and token LE resolved as shift (DO < LE).
    Conflict between rule 59 and token GT resolved as shift (DO < GT).
    Conflict between rule 59 and token GE resolved as shift (DO < GE).
    Conflict between rule 59 and token PLUS resolved as shift (DO < PLUS).
    Conflict between rule 59 and token MINUS resolved as shift (DO < MINUS).
    Conflict between rule 59 and token TIMES resolved as shift (DO < TIMES).
    Conflict between rule 59 and token DIVIDE resolved as shift (DO < DIVIDE).


State 163

   27 var: . simplevar
   28    | . fieldvar
   29    | . subscriptvar
   30    | . var DOT var
   31 simplevar: . ID
   32 fieldvar: . VAR ID COLON ID
   33 subscriptvar: . ID LBRACK exp RBRACK
   34             | . subscriptvar LBRACK exp RBRACK
   38 funcdec: FUNCTION ID LPAREN fieldlist RPAREN COLON ID EQ . exp
   43 opexp: . exp PLUS exp
   44      | . exp MINUS exp
   45      | . MINUS exp
   46      | . exp TIMES exp
   47      | . exp DIVIDE exp
   48      | . exp EQ exp
   49      | . exp NEQ exp
   50      | . exp LT exp
   51      | . exp LE exp
   52      | . exp GT exp
   53      | . exp GE exp
   54      | . exp AND exp
   55      | . exp OR exp
   56 ifexp: . IF exp THEN exp ELSE exp
   57      | . IF exp THEN exp
   58 whileexp: . WHILE exp DO exp
   59 forexp: . FOR var ASSIGN exp TO exp DO exp
   60 arrayexp: . ID LBRACK exp RBRACK OF exp
   61 recordexp: . ID LBRACE efieldlist RBRACE
   62 varexp: . var
   63 nilexp: . NIL
   64 intexp: . INT
   65 stringexp: . STRING
   66 callexp: . ID LPAREN explist RPAREN
   68 assignexp: . var ASSIGN exp
   69 breakexp: . BREAK
   70 letexp: . LET declist IN seqexp END
   71 exp: . varexp
   72    | . nilexp
   73    | . intexp
   74    | . stringexp
   75    | . callexp
   76    | . opexp
   77    | . recordexp
   78    | . LPAREN seqexp RPAREN
   79    | . assignexp
   80    | . ifexp
   81    | . whileexp
   82    | . forexp
   83    | . breakexp
   84    | . letexp
   85    | . arrayexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    BREAK   shift, and go to state 5
    NIL     shift, and go to state 6
    VAR     shift, and go to state 7
    LET     shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    MINUS   shift, and go to state 12

    var           go to state 14
    simplevar     go to state 15
    fieldvar      go to state 16
    subscriptvar  go to state 17
    opexp         go to state 18
    ifexp         go to state 19
    whileexp      go to state 20
    forexp        go to state 21
    arrayexp      go to state 22
    recordexp     go to state 23
    varexp        go to state 24
    nilexp        go to state 25
    intexp        go to state 26
    stringexp     go to state 27
    callexp       go to state 28
    assignexp     go to state 29
    breakexp      go to state 30
    letexp        go to state 31
    exp           go to state 164


State 164

   38 funcdec: FUNCTION ID LPAREN fieldlist RPAREN COLON ID EQ exp .  [FUNCTION, VAR, TYPE, IN]
   43 opexp: exp . PLUS exp
   44      | exp . MINUS exp
   46      | exp . TIMES exp
   47      | exp . DIVIDE exp
   48      | exp . EQ exp
   49      | exp . NEQ exp
   50      | exp . LT exp
   51      | exp . LE exp
   52      | exp . GT exp
   53      | exp . GE exp
   54      | exp . AND exp
   55      | exp . OR exp

    AND     shift, and go to state 60
    OR      shift, and go to state 61
    EQ      shift, and go to state 62
    NEQ     shift, and go to state 63
    LT      shift, and go to state 64
    LE      shift, and go to state 65
    GT      shift, and go to state 66
    GE      shift, and go to state 67
    PLUS    shift, and go to state 68
    MINUS   shift, and go to state 69
    TIMES   shift, and go to state 70
    DIVIDE  shift, and go to state 71

    $default  reduce using rule 38 (funcdec)
